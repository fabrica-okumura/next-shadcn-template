#!/usr/bin/env node

import fs from 'node:fs'
import path from 'node:path'

const workspaceRoot = path.resolve(process.cwd())
const iconsDir = path.join(workspaceRoot, 'public', 'icons')
const outputPath = path.join(
  workspaceRoot,
  'src',
  'components',
  'ui',
  'icon-definitions.ts',
)

function readSvgFiles(directory) {
  return fs
    .readdirSync(directory, { withFileTypes: true })
    .filter((entry) => entry.isFile() && entry.name.endsWith('.svg'))
    .map((entry) => entry.name)
    .sort((a, b) => a.localeCompare(b))
}

function extractViewBox(svg) {
  const match = svg.match(/viewBox="([^"]+)"/)
  return match ? match[1] : '0 0 24 24'
}

function extractInnerContent(svg) {
  const match = svg.match(/<svg[^>]*>([\s\S]*?)<\/svg>/)
  if (!match) {
    throw new Error('Failed to extract inner content from SVG')
  }
  return match[1].trim()
}

function collectIds(content) {
  const ids = new Set()
  for (const match of content.matchAll(/id="([^"]+)"/g)) {
    ids.add(match[1])
  }
  return Array.from(ids)
}

function escapeBackticks(value) {
  return value.replace(/`/g, '\\`')
}

function toLiteral(value) {
  if (value.length === 0) {
    return '[]'
  }
  return `[${value.map((item) => `'${item}'`).join(', ')}]`
}

function generateDefinition({ name, viewBox, content, ids }) {
  const escapedContent = escapeBackticks(content)
  const contentLiteral = `\`${escapedContent}\``
  const idsLiteral = toLiteral(ids)

  return `  '${name}': {
    viewBox: '${viewBox}',
    content: ${contentLiteral},
    ids: ${idsLiteral},
  },`
}

function buildFile(entries) {
  const header = `// This file is auto-generated by scripts/generate-icons.mjs.
// Do not edit directly.

export interface IconDefinition {
  viewBox: string
  content: string
  ids: string[]
}

export const iconDefinitions: Record<string, IconDefinition> = {
`

  const body = entries.join('\n')

  const footer = `} as const

export type IconName = keyof typeof iconDefinitions
`

  return `${header}${body}\n${footer}`
}

function ensureOutputDir(filePath) {
  fs.mkdirSync(path.dirname(filePath), { recursive: true })
}

function main() {
  const svgFiles = readSvgFiles(iconsDir)

  if (svgFiles.length === 0) {
    throw new Error(`No SVG files found in ${iconsDir}`)
  }

  const entries = svgFiles.map((filename) => {
    const name = filename.replace(/\.svg$/, '')
    const svg = fs.readFileSync(path.join(iconsDir, filename), 'utf8')
    const viewBox = extractViewBox(svg)
    const content = extractInnerContent(svg)
    const ids = collectIds(content)

    return generateDefinition({ name, viewBox, content, ids })
  })

  const output = buildFile(entries)

  ensureOutputDir(outputPath)
  fs.writeFileSync(outputPath, output, 'utf8')

  // eslint-disable-next-line no-console
  console.log(
    `Generated icon definitions for ${entries.length} icons at ${path.relative(
      workspaceRoot,
      outputPath,
    )}`,
  )
}

main()

